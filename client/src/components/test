import React, { useState, useEffect } from "react";
import InputLabel from '@mui/material/InputLabel';
import { DemoContainer } from '@mui/x-date-pickers/internals/demo';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import 'dayjs/locale/en-gb';
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin from "@fullcalendar/interaction";
import listPlugin from "@fullcalendar/list";
import { Box, List, ListItem, ListItemText, Typography, useTheme } from "@mui/material";
import Input from '@mui/material/Input';
import TextField from '@mui/material/TextField';
import Header from "../components/Header";
import { tokens } from "./../theme";
import googleCalendarPlugin from "@fullcalendar/google-calendar";
import {  useNavigate } from "react-router-dom";
import Modal from '@mui/material/Modal';
import Button from '@mui/material/Button';
import Datetime from 'react-datetime';

const styleBtn = {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  padding: '10px 20px',
  color: 'white',
  borderRadius: '5px',
  cursor: 'pointer',
};
const style = {
 
  position: 'relative' ,
  display: 'flex',
  flexDirection: 'column',
  gap:'4rem',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: '#4d547d',
  border: '2px solid #000',
  boxShadow: 24,
  pt: 2,
  px: 4,
  pb: 3,
  color: '#191F45'
};

const Calendar = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [currentEvents, setCurrentEvents] = useState([]);
  const [events, setEvents] = useState([]);
  const navigate = useNavigate();
  const [open, setOpen] = React.useState(false);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  useEffect(() => {
    async function getEvents() {
      const response = await fetch(`http://localhost:5050/events/`);
  
      if (!response.ok) {
        const message = `An error occurred: ${response.statusText}`;
        window.alert(message);
        return;
      }
  
      const events = await response.json();
      console.log(events.map(event => event._id));
   
      setEvents(events);
     
    }
  

    getEvents();
  
    return;
  }, []);
  //modal configuration
  const [form, setForm] = useState({
    start: "",
    end: "",
    title: "",
    adressDepart:"",
    adressArrive:"",
    remarque:"",
  
  });
 
  
  // These methods will update the state properties.
  function updateForm(value) {
    return setForm((prev) => {
      return { ...prev, ...value };
    });
  }
  
  // This function will handle the submission.
  async function onSubmit(e) {
    e.preventDefault();
  
    // When a post request is sent to the create url, we'll add a new record to the database.
    const newPerson = { ...form };
  
    await fetch("http://localhost:5050/events", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newPerson),
    })
    .catch(error => {
      window.alert(error);
      return;
    });
  
    setForm({ start: "",
    end: "",
    title: "",
    adressDepart:"",
    adressArrive:"",
    remarque:"" });
    
    navigate("/");
  }
   


  //end of modal configuration
  
  const handleDateClick = () => navigate("/creatEvent")
  

  /* const handleEventEdit = 
  }; */

  return (
    <>
    <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="parent-modal-title"
        aria-describedby="parent-modal-description"
        
      >
        <Box sx={{ ...style, width: 400,}}>
        <div className="m-5 p-5 bg-black text-white rounded">
             
             <h3>Créer un nouveau rendez-vous</h3>
             <form onSubmit={onSubmit} className="form-group flex flex-col text-red-500" >
               <div className="form-group">
                 
                 <LocalizationProvider dateAdapter={AdapterDayjs}  adapterLocale={'en-gb'}>
        <DemoContainer components={['DateTimePicker']}>
        <DateTimePicker label="Date Et Heure de D'but" type="date"
                   className="form-control"
                   id="start"
                   
                   value={form.start}
                   onChange={value => updateForm({ start: value })}
                   required="true"
                   />
      </DemoContainer>
      </LocalizationProvider>
                 
               </div>
               <div className="form-group ">
                 
                 <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale={'en-gb'}>
                  <DemoContainer components={['DateTimePicker']}>
                    <DateTimePicker
                    label="Date Et Heure de fin"
                     type="date"
                   className="form-control"
                   id="end"
                   value={form.end}
                   onChange={value => updateForm({ end: value })}
                   required="true"/>
      </DemoContainer>
      </LocalizationProvider>
                
               </div>
               <div className="form-group flex first-letter:capitalize">
               <label htmlFor="end" className="mb-4">Client :</label>

               <Input fullWidth label="Client"
                sx={{
                  color: 'success.main',
                  
                }}
                 id="fullWidth" 
                type="text"
                color='primary'
                margin='dense'
                variant="outlined"
                id="title"
                value={form.title}
                onChange={(e) => updateForm({ title: e.target.value })}
                required="true"
                />
              
               </div>
               <div className="form-group ">
                 <label htmlFor="address" className="mb-3">Adresse de départ :</label>
                 <Input fullWidth
                   type="text"
                   className="form-control"
               id="adressDépart"
               placeholder="Adresse de départ"
                   value={form.adressDepart}
                   onChange={(e) => updateForm({ adressDepart: e.target.value })}
                   required="true"
                 />
               </div>
               <div className="form-group ">
                 <label htmlFor="address" className="mb-3">Adresse de d'arrivé :</label>
                 <Input fullWidth
                   type="text"
                   className="form-control"
                   id="adressArrive"
                   value={form.adressArrive}
                   onChange={(e) => updateForm({ adressArrive: e.target.value })}
                   required="true"
                 />
               </div>
               <div className="form-group ">
                 <label htmlFor="remarque" className="mb-3">Remarque :</label>
                 <Input fullWidth
                   type="text"
                   className="form-control"
                   id="remarque"
                   value={form.remarque}
                   onChange={(e) => updateForm({ remarque: e.target.value })}
                 />
               </div>
               <Box className="form-group" sx={{ ...styleBtn }}>
      <Button variant="contained" color="primary"
      type="submit">
        Confirmer
      </Button>
      </Box>
             </form>
           </div>
        </Box>
    </Modal>
    <Box m="20px">
      <Header title="Calendar" subtitle="Full Calendar Interactive Page" />

      <Box display="flex" justifyContent="space-between">
        {/* CALENDAR SIDEBAR */}
        <Box
          flex="1 1 20%"
          backgroundColor={colors.primary[400]}
          p="15px"
          borderRadius="4px"
        >
          <Typography variant="h5">Events</Typography>
          <List>
      {events?.map((event) => (
        <ListItem
          key={event.id}
          sx={{
            backgroundColor: event.remarque === '' ? colors.greenAccent[700] : colors.redAccent[500],
            margin: "10px 0",
            borderRadius: "2px",
          }}
        >
          <ListItemText
            primary={event.title}
            secondary={<Typography>{event.remarque !== '' ? `"${event.remarque}"` : ''}</Typography>}
          />
        </ListItem>
      ))}
    </List>
        </Box>

        {/* CALENDAR */}
        <Box flex="1 1 100%" ml="15px">
          <FullCalendar
            height="75vh"
            
            plugins={[
              dayGridPlugin,
              timeGridPlugin,
              interactionPlugin,
              listPlugin,
              googleCalendarPlugin,
              
            ]}
            headerToolbar={{
              left: "prev,next today",
              center: "title",
              right: "dayGridMonth,timeGridWeek,timeGridDay,listMonth",
            }}
            initialView="dayGridMonth"
            editable={true}
            selectable={true}
            selectMirror={true}
            dayMaxEvents={true}
            select={handleOpen}
            eventDrop= {
              (event) =>{
                const id = event.id;
                console.log(event.event.extendedProps._id)
                console.log(event)
              }
            }
            eventClick={(selected) => {
              
              navigate(`/EditEvent/${events.map(event => event)}`)}}
            eventsSet={({ events }) => setCurrentEvents(events)}
            googleCalendarApiKey="AIzaSyBALf9vGiNAEBH-HYSqtqqHYirQ_zIVexA"
            eventSources={[
               {
                googleCalendarId: "mouss27001@gmail.com",
                className: "gcal-event", // optional
              }, 
              events: {events : events}
              
            ]}
            initialEvents={[
              {
                id: "12315",
                title: "All-day event",
                date: "2023-05-24",
              },
              {
                id: "5123",
                title: "Timed event",
                date: "2022-09-28",
              },
            ]}
          />
        </Box>
      </Box>
    </Box>
    </>
  );
};

export default Calendar;










<div className="m-5 p-5 bg-black text-white rounded">
      <h3>Créer un nouveau rendez-vous</h3>
      <form onSubmit={onSubmit}>
      <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="en-gb">
                  <DateTimePicker
                    label="Date Et Heure de Début"
                    type="date"
                    className="form-control"
                    id="start"
                    value={form.start}
                    onChange={(value) => setForm((prev) => ({ ...prev, start: value }))}
                    required
                  />
                </LocalizationProvider>
        <div className="form-group">
          <label htmlFor="end" className="mb-3">End</label>
          <Datetime
            className="form-control"
            id="end"
            
            value={form.end}
            onChange={(value) => updateForm({ end: value })}
          />
        </div>
        <div className="form-group">
          <label htmlFor="title" className="mb-3">Titre</label>
          <input
            type="text"
            className="form-control"
            id="title"
            value={form.title}
            onChange={(e) => updateForm({ title: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label htmlFor="disc" className="mb-3">Description</label>
          <input
            type="text"
            className="form-control"
            id="disc"
            value={form.disc}
            onChange={(e) => updateForm({ disc: e.target.value })}
          />
        </div>
        <div className="form-group">
          <input
            type="submit"
            value="Create Event"
            className="btn btn-primary"
          />
        </div>
      </form>
    </div>
  );